{"version":3,"sources":["components/Editor.js","components/App.js","index.js"],"names":["Editor","props","language","fileName","value","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","useState","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","editorVal","setEditorVal","useEffect","timeout","setTimeout","clearTimeout","onClick","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAQe,SAASA,EAAOC,GAM3B,IACIC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,SACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SASJ,OACI,sBAAKC,UAAY,mBAAjB,UACI,qBAAKA,UAAY,eAAjB,SACCH,IAED,cAAC,aAAD,CACAI,eAXR,SAAsBC,EAAQC,EAAML,GAChCC,EAASD,IAWLA,MAASA,EACTE,UAAW,sBACXI,QAAW,CACPC,cAAc,EACdC,MAAM,EACNC,KAAKX,EACLY,MAAO,WACPC,aAAa,QCwCdC,MA7Ef,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,mBAAS,IAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAoBJ,mBAAS,IAA7B,mBAAOK,EAAP,KAAWC,EAAX,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAiCR,mBAAS,GAA1C,mBAAOS,EAAP,KAAiBC,EAAjB,KAqBA,OAlBAC,qBAAU,WAGR,IAAMC,EAAUC,YAAW,WACzBL,EAAU,uBAAD,OACDP,EADC,iCAEAE,EAFA,mCAGCE,EAHD,wCAMR,KAGH,OAAO,kBAAMS,aAAaF,MAC1B,CAACX,EAAKE,EAAIE,IAKV,qCACF,sBAAKhB,UAAY,gBAAjB,UAEE,wBAAQ0B,QAAW,kBAAML,EAAa,IAAtC,wBACA,wBAAQK,QAAW,kBAAML,EAAa,IAAtC,uBACA,wBAAQK,QAAW,kBAAML,EAAa,IAAtC,yBAEA,sBAAKrB,UAAY,cAAjB,UAEe,IAAdoB,EAAgB,cAAC1B,EAAD,CACjBE,SAAW,MACXC,SAAW,aACXC,MAASc,EACTb,SAAYc,IACT,KAEQ,IAAdO,EAAgB,cAAC1B,EAAD,CACbE,SAAW,MACXC,SAAW,YACXC,MAASgB,EACTf,SAAYgB,IACT,KAEY,IAAdK,EAAiB,cAAC1B,EAAD,CAClBE,SAAW,aACXC,SAAW,WACXC,MAASkB,EACTjB,SAAYkB,IACT,QAGH,qBAAKjB,UAAY,OAAjB,SAEE,wBACAkB,OAAUA,EACVS,MAAQ,SACRC,QAAW,gBACXC,YAAc,IACdC,MAAQ,OACRC,OAAS,eChEfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4fbc1541.chunk.js","sourcesContent":["import React from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport {Controlled as ControlledEditor } from 'react-codemirror2' /* To add controlled editor*/\r\n\r\nexport default function Editor(props) {\r\n    /*langauge represents language in use*/\r\n    /*fileName displays the filename in use*/\r\n    /*value represents the value (code input from user)*/\r\n    /*onChange is method to set value of html, css and js content.*/\r\n    \r\n    const{\r\n        language, \r\n        fileName,\r\n        value,\r\n        onChange\r\n    } = props\r\n\r\n    /* set css, javascript or html changed value from editor into respective variables*/\r\n    function handleChange(editor, data, value){\r\n        onChange(value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"editor-container\">\r\n            <div className = \"editor-title\">\r\n            {fileName}\r\n            </div>\r\n            <ControlledEditor\r\n            onBeforeChange = {handleChange}\r\n            value = {value}\r\n            className= \"code-mirror-wrapper\"\r\n            options = {{\r\n                lineWrapping: true,\r\n                lint: true,\r\n                mode:language,\r\n                theme: 'material',\r\n                lineNumbers: true\r\n            }}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","\nimport React, { useState, useEffect } from 'react';\nimport Editor from './Editor';\n\nfunction App() {\n  const [html, setHtml] = useState('') /* Saves editor's text in index.html */ \n  const [css, setCss] = useState('') /* Saves editor's text in index.css */ \n  const [js, setJs] = useState('') /* Saves editor's text in index.js */ \n  const [srcDoc, setSrcDoc] = useState('') /* Combined document using html, js and css file to give into iframe for output*/\n  const [editorVal,setEditorVal] = useState(0) /*to control display of html,css and js code of the user. (for 0,1,2 values respectively).*/\n  \n  /* to add delay to hot-reload*/\n  useEffect(() =>\n  {\n    /*create source code doc using all the files(js,html,css) after 300 delay timeout*/\n    const timeout = setTimeout(() =>{ \n      setSrcDoc(`<html>\n      <body>${html}</body>\n      <style>${css}</style>\n      <script>${js}</script>\n      </html>\n      `)\n    }, 300)\n\n    /*to clear timeout*/\n    return () => clearTimeout(timeout) \n  },[html,css,js])\n\n  \n  \n  return(\n    <>\n  <div className = \"file-explorer\">\n    \n    <button onClick = {() => setEditorVal(0)}>index.html</button>\n    <button onClick = {() => setEditorVal(1)}>index.css</button>\n    <button onClick = {() => setEditorVal(2)} >index.js</button>\n  </div>\n    <div className = \"pane editor\">  \n    \n    {editorVal === 0?<Editor \n    language = \"xml\"\n    fileName = \"index.html\"\n    value = {html}\n    onChange = {setHtml}\n    />:null}\n\n{editorVal === 1?<Editor \n    language = \"css\"\n    fileName = \"index.css\"\n    value = {css}\n    onChange = {setCss}\n    />:null}\n\n    {editorVal === 2? <Editor \n    language = \"javascript\"\n    fileName = \"index.js\"\n    value = {js}\n    onChange = {setJs}\n    />:null}\n\n    </div>\n    <div className = \"pane\">\n\n      <iframe \n      srcDoc = {srcDoc}\n      title = \"output\"\n      sandbox  = \"allow-scripts\" /*sand box for security and restrict access */\n      frameBorder = \"0\"\n      width = \"100%\"\n      height = \"100%\"\n      />\n      </div>\n     \n      </>\n    )\n  }\n  \n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}